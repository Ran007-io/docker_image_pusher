name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
        # 忽略空行与注释
        [[ -z "$line" ]] && continue
        if echo "$line" | grep -q '^\s*#'; then
            continue
        fi
    
        # 提取平台信息 (比如 --platform=linux/arm64)
        platform=$(echo "$line" | grep -oP '(?<=--platform[ =])[^ ]+')
    
        # 获取真正的镜像名称（最后一个字段），并去掉 @sha256
        image=$(echo "$line" | awk '{print $NF}')
        image="${image%%@*}"
    
        # 拉取镜像（带平台时强制指定）
        if [ -n "$platform" ]; then
            echo "docker pull --platform=$platform $image"
            docker pull --platform=$platform $image
        else
            echo "docker pull $image"
            docker pull $image
        fi
    
        echo "platform is $platform"
    
        # 如果存在架构信息 将架构信息拼到镜像名称前面
        if [ -z "$platform" ]; then
            platform_prefix=""
        else
            platform_prefix="${platform//\//_}_"
        fi
        echo "platform_prefix is $platform_prefix"
    
        # 获取 镜像名:版本号  例如 nginx:1.25.3
        image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
        # 获取命名空间 例如 kasmweb
        name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
        # 获取镜像名 例如 nginx
        image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
    
        name_space_prefix=""
        # 如果镜像名重名
        if [[ -n "${duplicate_images[$image_name]}" ]]; then
            # 如果命名空间非空，将命名空间加到前缀
            if [[ -n "${name_space}" ]]; then
                name_space_prefix="${name_space}_"
            fi
        fi
    
        # 将@sha256:等字符删除
        image_name_tag="${image_name_tag%%@*}"
        new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
    
        echo "docker tag $image $new_image"
        docker tag $image $new_image
        echo "docker push $new_image"
        docker push $new_image
    
        echo "开始清理磁盘空间"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
        docker rmi $image || true
        docker rmi $new_image || true
        echo "磁盘空间清理完毕"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
    
        done < images.txt

